name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  MONGODB_URI: mongodb://localhost:27017/discord-trade-test
  REDIS_URL: redis://localhost:6379
  SESSION_SECRET: test-session-secret-minimum-32-chars-long-for-testing
  JWT_SECRET: test-jwt-secret-minimum-32-chars-long-for-testing-purposes
  ENCRYPTION_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  DISCORD_CLIENT_ID: test-discord-client-id
  DISCORD_CLIENT_SECRET: test-discord-secret-min-32-chars
  DISCORD_BOT_TOKEN: test-bot-token-minimum-32-characters
  DISCORD_REDIRECT_URI: http://localhost:3000/auth/discord/callback
  POLAR_API_KEY: test-polar-api-key-minimum-32-chars
  SENTRY_DSN: https://test@sentry.io/test

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint || true
      
      - name: Check for formatting issues
        run: npx prettier --check "src/**/*.js" "tests/**/*.js" || true

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:8.0.4
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit -- --coverage --collectCoverageFrom='src/**/*.js'
        continue-on-error: false
      
      - name: Run integration tests
        run: npm run test:integration -- --coverage --collectCoverageFrom='src/**/*.js'
        continue-on-error: false
      
      - name: Generate full coverage report
        run: npm test -- --coverage --coverageReporters=json-summary --coverageReporters=lcov --coverageReporters=text
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Check critical path coverage (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🔍 Checking critical path coverage requirements..."
          
          # Extract coverage data
          COVERAGE_FILE="coverage/coverage-summary.json"
          
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ Coverage file not found!"
            exit 1
          fi
          
          # Check auth/* coverage
          AUTH_COVERAGE=$(node -e "
            const coverage = require('./$COVERAGE_FILE');
            const authFiles = Object.keys(coverage).filter(f => f.includes('src/auth/'));
            if (authFiles.length === 0) {
              console.log('0'); 
            } else {
              const total = authFiles.reduce((sum, f) => {
                const lines = coverage[f].lines.pct;
                return sum + lines;
              }, 0);
              console.log((total / authFiles.length).toFixed(2));
            }
          ")
          
          # Check billing/* coverage
          BILLING_COVERAGE=$(node -e "
            const coverage = require('./$COVERAGE_FILE');
            const billingFiles = Object.keys(coverage).filter(f => f.includes('src/billing/'));
            if (billingFiles.length === 0) {
              console.log('0');
            } else {
              const total = billingFiles.reduce((sum, f) => {
                const lines = coverage[f].lines.pct;
                return sum + lines;
              }, 0);
              console.log((total / billingFiles.length).toFixed(2));
            }
          ")
          
          # Check TradeExecutionService coverage
          TRADE_COVERAGE=$(node -e "
            const coverage = require('./$COVERAGE_FILE');
            const tradeFile = Object.keys(coverage).find(f => f.includes('TradeExecutionService.js'));
            if (!tradeFile) {
              console.log('0');
            } else {
              console.log(coverage[tradeFile].lines.pct);
            }
          ")
          
          # Check RiskManagementService coverage
          RISK_COVERAGE=$(node -e "
            const coverage = require('./$COVERAGE_FILE');
            const riskFile = Object.keys(coverage).find(f => f.includes('RiskManagementService.js'));
            if (!riskFile) {
              console.log('0');
            } else {
              console.log(coverage[riskFile].lines.pct);
            }
          ")
          
          echo "📊 Coverage Results:"
          echo "  Auth:    ${AUTH_COVERAGE}%"
          echo "  Billing: ${BILLING_COVERAGE}%"
          echo "  Trade:   ${TRADE_COVERAGE}%"
          echo "  Risk:    ${RISK_COVERAGE}%"
          
          # Enforce 95% threshold
          THRESHOLD=95
          FAILED=0
          
          if (( $(echo "$AUTH_COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Auth coverage ${AUTH_COVERAGE}% is below ${THRESHOLD}%"
            FAILED=1
          fi
          
          if (( $(echo "$BILLING_COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Billing coverage ${BILLING_COVERAGE}% is below ${THRESHOLD}%"
            FAILED=1
          fi
          
          if (( $(echo "$TRADE_COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Trade execution coverage ${TRADE_COVERAGE}% is below ${THRESHOLD}%"
            FAILED=1
          fi
          
          if (( $(echo "$RISK_COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Risk management coverage ${RISK_COVERAGE}% is below ${THRESHOLD}%"
            FAILED=1
          fi
          
          if [ $FAILED -eq 1 ]; then
            echo ""
            echo "💥 CRITICAL PATH COVERAGE CHECK FAILED"
            echo "Required: ${THRESHOLD}% for auth, billing, trade execution, and risk management"
            exit 1
          fi
          
          echo "✅ All critical paths meet ${THRESHOLD}% coverage requirement"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build || echo "No build script defined"
      
      - name: Build dashboard
        run: npm run build:dashboard || echo "No dashboard build script defined"
      
      - name: Check bundle size
        run: |
          if [ -d "dist" ]; then
            echo "📦 Bundle sizes:"
            du -sh dist/*
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate || true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:8.0.4
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
      
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run E2E tests
        run: npm run test:e2e || echo "No E2E tests configured yet"
      
      - name: Run integration smoke tests
        run: npm run test:integration -- --testNamePattern="smoke"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Tests failed - deployment blocked**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All checks passed - ready for deployment**" >> $GITHUB_STEP_SUMMARY
