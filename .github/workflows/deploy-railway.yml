name: Deploy to Railway

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  # ============================================
  # Quality Gates - Run in Parallel
  # ============================================

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- tests/unit/ --no-coverage --ci
        env:
          NODE_ENV: test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm test -- tests/integration/ --no-coverage --ci
        env:
          NODE_ENV: test
          DATABASE_URL: mongodb://localhost:27017/test
          REDIS_URL: redis://localhost:6379

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run load tests
        run: npm test -- tests/load/ --no-coverage --ci --testTimeout=120000
        env:
          NODE_ENV: test
          DATABASE_URL: mongodb://localhost:27017/test
          REDIS_URL: redis://localhost:6379

  # ============================================
  # Build & Validate
  # ============================================

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, security-scan, unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build --if-present
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          echo "Checking for built files..."
          ls -la
          echo "Build completed successfully"

  # ============================================
  # Deploy to Railway (Main Branch Only)
  # ============================================

  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [build, load-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://your-app.railway.app

    steps:
      - uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        id: deploy
        run: railway up --service=web
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-app.railway.app/health)
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status $response"
            exit 1
          fi

      - name: Redis health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-app.railway.app/health/redis)
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Redis health check passed"
          else
            echo "‚ùå Redis health check failed with status $response"
            exit 1
          fi

      - name: Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment to Railway completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # Post-Deployment Smoke Tests
  # ============================================

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test WebSocket connection
        run: |
          npm install -g wscat
          timeout 10 wscat -c wss://your-app.railway.app || echo "WebSocket test requires authentication"

      - name: Test API endpoints
        run: |
          curl -f https://your-app.railway.app/health
          curl -f https://your-app.railway.app/health/redis
          curl -f https://your-app.railway.app/api/status

      - name: Smoke test summary
        run: echo "‚úÖ All smoke tests passed"

  # ============================================
  # Rollback on Failure
  # ============================================

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Rollback deployment
        run: railway rollback
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'üö® Deployment failed and was rolled back'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
